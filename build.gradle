import java.nio.file.Files
import static java.nio.file.StandardCopyOption.REPLACE_EXISTING

apply plugin: 'java'
apply plugin: 'kotlin'
apply from: LOGSTASH_CORE_PATH + "/../rubyUtils.gradle"

// ===========================================================================
// plugin info
// ===========================================================================
group                      'net.p1kachu.logstash.input.grpc' // must match the package of the main plugin class
version                    "${file("VERSION").text.trim()}" // read from required VERSION file
description                = "Logstash input plugin for gRPC (stream)"
pluginInfo.licenses        = ['Apache-2.0'] // list of SPDX license IDs
pluginInfo.longDescription = "This gem is a Logstash plugin required to be installed on top of the Logstash core pipeline using \$LS_HOME/bin/logstash-plugin install gemname. This gem is not a stand-alone program"
pluginInfo.authors         = ['pikatenor']
pluginInfo.email           = ['pikatenor@p1kachu.net']
pluginInfo.homepage        = "https://github.com/pikatenor/logstash-input-grpc"
pluginInfo.pluginType      = "input"
pluginInfo.pluginClass     = "Grpc"
pluginInfo.pluginName      = "grpc" // must match the @LogstashPlugin annotation in the main plugin class
// ===========================================================================

sourceCompatibility = 1.8
targetCompatibility = 1.8

buildscript {
    ext.kotlin_version = '2.1.20'
    ext.snakeYamlVersion = '2.2' // ref. elastic/logstash/blob/main/build.gradle#L22 / elastic/logstash/blob/main/rubyUtils.gradle#L26
    repositories {
        mavenCentral()
        gradlePluginPortal()
    }

    dependencies {
        classpath 'gradle.plugin.com.github.johnrengelman:shadow:8.0.0'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath 'com.google.protobuf:protobuf-gradle-plugin:0.9.4'
    }
}

repositories {
    mavenCentral()
}

apply plugin: 'com.github.johnrengelman.shadow'

shadowJar {
    archiveClassifier = null
    mergeServiceFiles()
}

apply plugin: 'com.google.protobuf'

protobuf {
    protoc {
        artifact = 'com.google.protobuf:protoc:3.25.6'
    }
    plugins {
        grpc {
            artifact = 'io.grpc:protoc-gen-grpc-java:1.71.0'
        }
    }
    generateProtoTasks {
        all().each { task ->
            task.plugins {
                grpc { }
            }
            task.generateDescriptorSet = true
            task.descriptorSetOptions.includeImports = true
        }
    }
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    implementation 'org.apache.commons:commons-lang3:3.17.0'
    implementation 'org.apache.logging.log4j:log4j-api:2.24.3'
    implementation 'org.apache.logging.log4j:log4j-core:2.24.3'
    implementation 'com.google.protobuf:protobuf-java:3.25.6'
    implementation 'com.google.protobuf:protobuf-java-util:3.25.6'
    implementation 'com.google.guava:guava:33.4.8-jre'
    implementation "io.grpc:grpc-core:1.71.0"
    implementation "io.grpc:grpc-stub:1.71.0"
    implementation "io.grpc:grpc-netty-shaded:1.71.0"
    implementation fileTree(dir: LOGSTASH_CORE_PATH, include: "**/logstash-core.jar")

    testImplementation 'junit:junit:4.13.2'
    testImplementation "io.grpc:grpc-protobuf:1.71.0"
    testImplementation "javax.annotation:javax.annotation-api:1.3.2"
    testImplementation "org.jetbrains.kotlin:kotlin-script-runtime:$kotlin_version"
}

clean {
    delete "${projectDir}/Gemfile"
    delete "${projectDir}/" + pluginInfo.pluginFullName() + ".gemspec"
    delete "${projectDir}/lib/"
    delete "${projectDir}/vendor/"
    new FileNameFinder().getFileNames(projectDir.toString(), pluginInfo.pluginFullName() + "-?.?.?.gem").each { filename ->
        delete filename
    }
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

tasks.register("vendor"){
    dependsOn shadowJar
    doLast {
        String vendorPathPrefix = "vendor/jar-dependencies"
        String projectGroupPath = project.group.replaceAll('\\.', '/')
        File projectJarFile = file("${vendorPathPrefix}/${projectGroupPath}/${pluginInfo.pluginFullName()}/${project.version}/${pluginInfo.pluginFullName()}-${project.version}.jar")
        projectJarFile.mkdirs()
        Files.copy(file("$buildDir/libs/${project.name}-${project.version}.jar").toPath(), projectJarFile.toPath(), REPLACE_EXISTING)
        validatePluginJar(projectJarFile, project.group)
    }
}

tasks.register("generateRubySupportFiles") {
    doLast {
        generateRubySupportFilesForPlugin(project.description, project.group, version)
    }
}

tasks.register("removeObsoleteJars") {
    doLast {
        new FileNameFinder().getFileNames(
                projectDir.toString(),
                "vendor/**/" + pluginInfo.pluginFullName() + "*.jar",
                "vendor/**/" + pluginInfo.pluginFullName() + "-" + version + ".jar").each { f ->
            delete f
        }
    }
}

tasks.register("gem"){
    dependsOn = [downloadAndInstallJRuby, removeObsoleteJars, vendor, generateRubySupportFiles]
    doLast {
        buildGem(projectDir, buildDir, pluginInfo.pluginFullName() + ".gemspec")
    }
}
compileKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}
compileTestKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}
